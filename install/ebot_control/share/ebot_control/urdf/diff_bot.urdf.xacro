<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="diff_bot">
    <!-- Main URDF file for Two Wheeled Differential Drive Robot -->
    
    <!-- Include general xacro macros -->
    <xacro:include filename="common.xacro"/>

    <!-- Include sensors -->
    <xacro:include filename="lidar.urdf.xacro"/>

    <!-- Robot Variables -->
    <xacro:property name="chassis_length" value="0.35"/>
    <xacro:property name="chassis_width" value="0.3"/>
    <xacro:property name="chassis_height" value="0.08"/>
    <xacro:property name="chassis_mass" value="4.0"/>
    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_thickness" value="0.018"/>
    <xacro:property name="wheel_mass" value="0.3"/>
    <xacro:property name="wheel_offset_x" value="0.1"/>
    <xacro:property name="wheel_offset_y" value="${chassis_width/2 + wheel_thickness/2}"/>
    <xacro:property name="wheel_offset_z" value="0.0"/>
    <xacro:property name="caster_wheel_radius" value="0.032225"/>
    <xacro:property name="caster_wheel_mass" value="0.2"/>
    <xacro:property name="caster_wheel_offset_x" value="${chassis_length/2}"/>
    <xacro:property name="caster_wheel_offset_z" value="${wheel_offset_z - wheel_radius + caster_wheel_radius}"/>

    <!-- Base footprint -->
    <link name="base_footprint"/>

    <!-- Base link -->
    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>
    <link name="base_link"/>

    <!-- Chassis -->
    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
        <origin xyz="0 0 0"/>
    </joint>
    <link name="chassis">
        <visual>
            <origin xyz="0 0 ${chassis_height/2}"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
            <material name="red"/>
        </visual>
        <collision>
            <origin xyz="0 0 ${chassis_height/2}"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.5" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}">
            <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <!-- Left Wheel -->
    <joint name="left_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="left_wheel"/>
        <origin xyz="${-wheel_offset_x} ${wheel_offset_y} 0" rpy="-${pi/2} 0 0"/>
        <axis xyz="0 0 1"/>
    </joint>
    <link name="left_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="${wheel_mass}" length="${wheel_thickness}" radius="${wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <!-- Right Wheel -->
    <joint name="right_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="right_wheel"/>
        <origin xyz="${-wheel_offset_x} ${-wheel_offset_y} 0" rpy="${pi/2} 0 0"/>
        <axis xyz="0 0 -1"/>
    </joint>
    <link name="right_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="${wheel_mass}" length="${wheel_thickness}" radius="${wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <!-- Transmission elements for the wheels -->
    <transmission name="left_wheel_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="left_wheel_joint">
            <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        </joint>
        <actuator name="left_wheel_motor">
            <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

    <transmission name="right_wheel_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="right_wheel_joint">
            <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        </joint>
        <actuator name="right_wheel_motor">
            <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

    <!-- Caster Wheel -->
    <joint name="caster_wheel_joint" type="fixed">
        <parent link="chassis"/>
        <child link="caster_wheel"/>
        <origin xyz="${caster_wheel_offset_x} 0 ${caster_wheel_offset_z}"/>
    </joint>
    <link name="caster_wheel">
        <visual>
            <geometry>
                <sphere radius="${caster_wheel_radius}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${caster_wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_sphere mass="${caster_wheel_mass}" radius="${caster_wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    <!-- Lidar Sensor (macro call) -->
    <xacro:lidar_sensor
        parent="chassis"
        frame_id="laser_frame"
        xyz_offset="0 0 0.1"
        rpy_offset="0 0 0"
        topic_name="scan"
        update_rate="10"
        ray_count="720"
        min_angle="-3.14159"
        max_angle="3.14159"
        min_range="0.20"
        max_range="30.0"
        range_resolution="0.013"
        always_on="true"
        visualize="false"
        enable_collision="false"
    />

    <!-- Gazebo -->
    <gazebo reference="chassis">
        <material>Gazebo/Red</material>
    </gazebo>

    <gazebo reference="left_wheel">
        <material>Gazebo/Black</material>
    </gazebo>

    <gazebo reference="right_wheel">
        <material>Gazebo/Black</material>
    </gazebo>

    <gazebo reference="caster_wheel">
        <material>Gazebo/Black</material>
        <mu1 value="0.001"/>
        <mu2 value="0.001"/>
    </gazebo>

    <!-- Gazebo plugins -->
    <gazebo>
        <!-- Differential Drive Robot -->
        <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>
            <wheel_separation>${wheel_offset_y*2}</wheel_separation>
            <wheel_radius>${wheel_radius}</wheel_radius>
            <max_linear_acceleration>6.0</max_linear_acceleration>
            <frame_id>odom</frame_id>
            <child_frame_id>base_link</child_frame_id>
            <tf_topic>/tf</tf_topic>
            <topic>cmd_vel</topic>
            <odom_topic>odom</odom_topic>
            <odom_publisher_frequency>30</odom_publisher_frequency>
        </plugin>

        <!-- Joint State Publisher -->
        <plugin filename="gz-sim-joint-state-publisher-system" name="gz::sim::systems::JointStatePublisher">
            <topic>joint_states</topic>
            <joint_name>left_wheel_joint</joint_name>
            <joint_name>right_wheel_joint</joint_name>
        </plugin>
    </gazebo>
</robot>